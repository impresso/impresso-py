# generated by datamodel-codegen:
#   filename:  http://localhost:3030/swagger.json

from __future__ import annotations

from typing import Any, Mapping, Optional, Sequence

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Annotated, Literal


class User(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: int
    username: str
    firstname: str
    lastname: str
    isStaff: bool
    isActive: bool
    isSuperuser: bool
    uid: str


class AuthRequestSchema(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    strategy: Literal['local']
    email: str
    password: str


class Authentication(BaseModel):
    strategy: Optional[str] = None
    payload: Optional[Mapping[str, Any]] = None


class AuthResponseSchema(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accessToken: str
    authentication: Authentication
    user: User


class Entity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    uid: Annotated[str, Field(description='Unique identifier of the entity')]
    relevance: Annotated[
        int, Field(description='Relevance of the entity in the document')
    ]


class Page(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    uid: Annotated[str, Field(description='The unique identifier of the page')]
    num: Annotated[int, Field(description='The number of the page')]
    issueUid: Annotated[str, Field(description='Reference to the article')]
    newspaperUid: Annotated[str, Field(description='Unique ID of the newspaper')]
    iiif: Annotated[
        Optional[str], Field(None, description='The IIF image file name of the page')
    ]
    iiifThumbnail: Annotated[
        str, Field(description='The IIF image thumbnail file name of the page')
    ]
    accessRights: Annotated[str, Field(description='The access rights code')]
    labels: Annotated[Sequence[str], Field(description='Page labels')]
    hasCoords: Annotated[bool, Field(description='Whether the page has coordinates')]
    hasErrors: Annotated[bool, Field(description='Whether the page has errors')]
    regions: Annotated[
        Sequence[Mapping[str, Any]], Field(description='Regions of the page')
    ]
    obfuscated: Annotated[
        Optional[bool],
        Field(
            None,
            description='Whether the page image has been obfuscated because the user is not authorised to access it',
        ),
    ]
    iiifFragment: Annotated[
        Optional[str],
        Field(None, description='The IIIF fragment of the page, image file name'),
    ]


class Article(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    uid: Annotated[str, Field(description='The unique identifier of the article')]
    type: Annotated[
        str, Field(description='The type of the article. NOTE: may be empty.')
    ]
    title: Annotated[str, Field(description='The title of the article')]
    size: Annotated[int, Field(description='The size of the article in characters')]
    nbPages: Annotated[int, Field(description='The number of pages in this article')]
    pages: Sequence[Page]
    isCC: Annotated[bool, Field(description='TODO')]
    excerpt: Annotated[str, Field(description='The excerpt of the article')]
    locations: Optional[Sequence[Entity]] = None
    persons: Optional[Sequence[Entity]] = None


class SearchResponseSchema(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    data: Sequence[Article]
    limit: Annotated[
        int, Field(description='The number of articles returned in this response')
    ]
    skip: Annotated[
        int, Field(description='The number of articles skipped in this response')
    ]
    total: Annotated[
        int, Field(description='The total number of articles matching the query')
    ]
    info: Annotated[
        Mapping[str, Any],
        Field(description='Additional information about the search response.'),
    ]
