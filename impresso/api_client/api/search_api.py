# coding: utf-8

"""
    Impresso Public API

    Impresso Public API Documentation

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from impresso.api_client.models.search_get_filters_parameter_inner import SearchGetFiltersParameterInner
from impresso.api_client.models.search_list import SearchList

from impresso.api_client.api_client import ApiClient, RequestSerialized
from impresso.api_client.api_response import ApiResponse
from impresso.api_client.rest import RESTResponseType


class SearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def search_get(
        self,
        group_by: Annotated[StrictStr, Field(description="Group by term")],
        q: Annotated[Optional[Annotated[str, Field(min_length=2, strict=True, max_length=1000)]], Field(description="Search query term")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Order by term")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="Facet to return")] = None,
        filters: Annotated[Optional[List[SearchGetFiltersParameterInner]], Field(description="Filters to apply")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Total items to return")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Items to skip")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchList:
        """

        Find articles that match the given query

        :param group_by: Group by term (required)
        :type group_by: str
        :param q: Search query term
        :type q: str
        :param order_by: Order by term
        :type order_by: str
        :param facets: Facet to return
        :type facets: str
        :param filters: Filters to apply
        :type filters: List[SearchGetFiltersParameterInner]
        :param limit: Total items to return
        :type limit: int
        :param skip: Items to skip
        :type skip: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_get_serialize(
            group_by=group_by,
            q=q,
            order_by=order_by,
            facets=facets,
            filters=filters,
            limit=limit,
            skip=skip,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchList",
            '401': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_get_with_http_info(
        self,
        group_by: Annotated[StrictStr, Field(description="Group by term")],
        q: Annotated[Optional[Annotated[str, Field(min_length=2, strict=True, max_length=1000)]], Field(description="Search query term")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Order by term")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="Facet to return")] = None,
        filters: Annotated[Optional[List[SearchGetFiltersParameterInner]], Field(description="Filters to apply")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Total items to return")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Items to skip")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchList]:
        """

        Find articles that match the given query

        :param group_by: Group by term (required)
        :type group_by: str
        :param q: Search query term
        :type q: str
        :param order_by: Order by term
        :type order_by: str
        :param facets: Facet to return
        :type facets: str
        :param filters: Filters to apply
        :type filters: List[SearchGetFiltersParameterInner]
        :param limit: Total items to return
        :type limit: int
        :param skip: Items to skip
        :type skip: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_get_serialize(
            group_by=group_by,
            q=q,
            order_by=order_by,
            facets=facets,
            filters=filters,
            limit=limit,
            skip=skip,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchList",
            '401': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_get_without_preload_content(
        self,
        group_by: Annotated[StrictStr, Field(description="Group by term")],
        q: Annotated[Optional[Annotated[str, Field(min_length=2, strict=True, max_length=1000)]], Field(description="Search query term")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Order by term")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="Facet to return")] = None,
        filters: Annotated[Optional[List[SearchGetFiltersParameterInner]], Field(description="Filters to apply")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Total items to return")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Items to skip")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """

        Find articles that match the given query

        :param group_by: Group by term (required)
        :type group_by: str
        :param q: Search query term
        :type q: str
        :param order_by: Order by term
        :type order_by: str
        :param facets: Facet to return
        :type facets: str
        :param filters: Filters to apply
        :type filters: List[SearchGetFiltersParameterInner]
        :param limit: Total items to return
        :type limit: int
        :param skip: Items to skip
        :type skip: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_get_serialize(
            group_by=group_by,
            q=q,
            order_by=order_by,
            facets=facets,
            filters=filters,
            limit=limit,
            skip=skip,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchList",
            '401': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_get_serialize(
        self,
        group_by,
        q,
        order_by,
        facets,
        filters,
        limit,
        skip,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if q is not None:
            
            _query_params.append(('q', q))
            
        if group_by is not None:
            
            _query_params.append(('group_by', group_by))
            
        if order_by is not None:
            
            _query_params.append(('order_by', order_by))
            
        if facets is not None:
            
            _query_params.append(('facets', facets))
            
        if filters is not None:
            
            _query_params.append(('filters', filters))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if skip is not None:
            
            _query_params.append(('skip', skip))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


