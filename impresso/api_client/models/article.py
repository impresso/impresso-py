# coding: utf-8

"""
    Impresso Public API

    Impresso Public API Documentation

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from impresso.api_client.models.entity import Entity
from impresso.api_client.models.page import Page
from typing import Optional, Set
from typing_extensions import Self

class Article(BaseModel):
    """
    A journal/magazine article
    """ # noqa: E501
    uid: StrictStr = Field(description="The unique identifier of the article")
    type: StrictStr = Field(description="The type of the article. NOTE: may be empty.")
    title: StrictStr = Field(description="The title of the article")
    size: StrictInt = Field(description="The size of the article in characters")
    nb_pages: StrictInt = Field(description="The number of pages in this article", alias="nbPages")
    pages: List[Page]
    is_cc: StrictBool = Field(description="TODO", alias="isCC")
    excerpt: StrictStr = Field(description="The excerpt of the article")
    locations: Optional[List[Entity]] = None
    persons: Optional[List[Entity]] = None
    __properties: ClassVar[List[str]] = ["uid", "type", "title", "size", "nbPages", "pages", "isCC", "excerpt", "locations", "persons"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Article from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pages (list)
        _items = []
        if self.pages:
            for _item in self.pages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in locations (list)
        _items = []
        if self.locations:
            for _item in self.locations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['locations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in persons (list)
        _items = []
        if self.persons:
            for _item in self.persons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['persons'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Article from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uid": obj.get("uid"),
            "type": obj.get("type"),
            "title": obj.get("title"),
            "size": obj.get("size"),
            "nbPages": obj.get("nbPages"),
            "pages": [Page.from_dict(_item) for _item in obj["pages"]] if obj.get("pages") is not None else None,
            "isCC": obj.get("isCC"),
            "excerpt": obj.get("excerpt"),
            "locations": [Entity.from_dict(_item) for _item in obj["locations"]] if obj.get("locations") is not None else None,
            "persons": [Entity.from_dict(_item) for _item in obj["persons"]] if obj.get("persons") is not None else None
        })
        return _obj


