# coding: utf-8

"""
    Impresso Public API

    Impresso Public API Documentation

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Page(BaseModel):
    """
    A page of an article
    """ # noqa: E501
    uid: StrictStr = Field(description="The unique identifier of the page")
    num: StrictInt = Field(description="The number of the page")
    issue_uid: StrictStr = Field(description="Reference to the article", alias="issueUid")
    newspaper_uid: StrictStr = Field(description="Unique ID of the newspaper", alias="newspaperUid")
    iiif: Optional[StrictStr] = Field(default=None, description="The IIF image file name of the page")
    iiif_thumbnail: StrictStr = Field(description="The IIF image thumbnail file name of the page", alias="iiifThumbnail")
    access_rights: StrictStr = Field(description="The access rights code", alias="accessRights")
    labels: List[StrictStr] = Field(description="Page labels")
    has_coords: StrictBool = Field(description="Whether the page has coordinates", alias="hasCoords")
    has_errors: StrictBool = Field(description="Whether the page has errors", alias="hasErrors")
    regions: List[Dict[str, Any]] = Field(description="Regions of the page")
    obfuscated: Optional[StrictBool] = Field(default=None, description="Whether the page image has been obfuscated because the user is not authorised to access it")
    iiif_fragment: Optional[StrictStr] = Field(default=None, description="The IIIF fragment of the page, image file name", alias="iiifFragment")
    __properties: ClassVar[List[str]] = ["uid", "num", "issueUid", "newspaperUid", "iiif", "iiifThumbnail", "accessRights", "labels", "hasCoords", "hasErrors", "regions", "obfuscated", "iiifFragment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Page from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Page from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uid": obj.get("uid"),
            "num": obj.get("num"),
            "issueUid": obj.get("issueUid"),
            "newspaperUid": obj.get("newspaperUid"),
            "iiif": obj.get("iiif"),
            "iiifThumbnail": obj.get("iiifThumbnail"),
            "accessRights": obj.get("accessRights"),
            "labels": obj.get("labels"),
            "hasCoords": obj.get("hasCoords"),
            "hasErrors": obj.get("hasErrors"),
            "regions": obj.get("regions"),
            "obfuscated": obj.get("obfuscated"),
            "iiifFragment": obj.get("iiifFragment")
        })
        return _obj


