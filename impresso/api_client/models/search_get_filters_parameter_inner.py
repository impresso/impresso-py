# coding: utf-8

"""
    Impresso Public API

    Impresso Public API Documentation

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from impresso.api_client.models.search_get_filters_parameter_inner_q import SearchGetFiltersParameterInnerQ
from typing import Optional, Set
from typing_extensions import Self

class SearchGetFiltersParameterInner(BaseModel):
    """
    A single filter criteria
    """ # noqa: E501
    context: Optional[StrictStr] = 'include'
    op: Optional[StrictStr] = 'OR'
    type: StrictStr = Field(description="Possible values are in 'search.validators:eachFilterValidator.type.choices'")
    precision: Optional[StrictStr] = 'exact'
    q: Optional[SearchGetFiltersParameterInnerQ] = None
    daterange: Optional[Annotated[str, Field(strict=True)]] = None
    uids: Optional[StrictStr] = None
    uid: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["context", "op", "type", "precision", "q", "daterange", "uids", "uid"]

    @field_validator('context')
    def context_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['include', 'exclude']):
            raise ValueError("must be one of enum values ('include', 'exclude')")
        return value

    @field_validator('op')
    def op_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AND', 'OR']):
            raise ValueError("must be one of enum values ('AND', 'OR')")
        return value

    @field_validator('precision')
    def precision_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['fuzzy', 'soft', 'exact', 'partial']):
            raise ValueError("must be one of enum values ('fuzzy', 'soft', 'exact', 'partial')")
        return value

    @field_validator('daterange')
    def daterange_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z TO \d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z", value):
            raise ValueError(r"must validate the regular expression /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z TO \d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchGetFiltersParameterInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of q
        if self.q:
            _dict['q'] = self.q.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchGetFiltersParameterInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context": obj.get("context") if obj.get("context") is not None else 'include',
            "op": obj.get("op") if obj.get("op") is not None else 'OR',
            "type": obj.get("type"),
            "precision": obj.get("precision") if obj.get("precision") is not None else 'exact',
            "q": SearchGetFiltersParameterInnerQ.from_dict(obj["q"]) if obj.get("q") is not None else None,
            "daterange": obj.get("daterange"),
            "uids": obj.get("uids"),
            "uid": obj.get("uid")
        })
        return _obj


