{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Impresso Python Impresso is a library designed to facilitate interaction with the Impresso dataset. It offers a comprehensive set of classes for API interaction and a variety of tools to streamline data manipulation and analysis. Installation and prerequisites The Impresso python library can be installed using pip : pip install impresso The library requires Python version 3.10 or higher. It also depends on several packages commonly found in Jupyter environments, such as matplotlib and pandas . Create a session impresso . connect ( public_api_url = None , persisted_token = True ) Connect to the Impresso API and return a client object. from impresso import connect impresso = connect() Parameters: public_api_url ( str , default: None ) \u2013 The URL of the Impresso API to connect to. By default using the default URL set in the config file (~/.impresso_py.yml) or the Impresso default URL ({DEFAULT_API_URL}). persisted_token ( bool , default: True ) \u2013 Whether to read and write token to the user directory (~/.impresso_py.yml). This is useful to avoid having to re-enter the token each time the Jupiter notebook is restarted. About Impresso Impresso project Impresso - Media Monitoring of the Past is an interdisciplinary research project that aims to develop and consolidate tools for processing and exploring large collections of media archives across modalities, time, languages and national borders. The first project (2017-2021) was funded by the Swiss National Science Foundation under grant No. CRSII5_173719 and the second project (2023-2027) by the SNSF under grant No. CRSII5_213585 and the Luxembourg National Research Fund under grant No. 17498891. Copyright Copyright (C) 2024 The Impresso team. License This program is provided as open source under the GNU Affero General Public License v3 or later.","title":"Home"},{"location":"#impresso-python","text":"Impresso is a library designed to facilitate interaction with the Impresso dataset. It offers a comprehensive set of classes for API interaction and a variety of tools to streamline data manipulation and analysis.","title":"Impresso Python"},{"location":"#installation-and-prerequisites","text":"The Impresso python library can be installed using pip : pip install impresso The library requires Python version 3.10 or higher. It also depends on several packages commonly found in Jupyter environments, such as matplotlib and pandas .","title":"Installation and prerequisites"},{"location":"#create-a-session","text":"","title":"Create a session"},{"location":"#impresso.connect","text":"Connect to the Impresso API and return a client object. from impresso import connect impresso = connect() Parameters: public_api_url ( str , default: None ) \u2013 The URL of the Impresso API to connect to. By default using the default URL set in the config file (~/.impresso_py.yml) or the Impresso default URL ({DEFAULT_API_URL}). persisted_token ( bool , default: True ) \u2013 Whether to read and write token to the user directory (~/.impresso_py.yml). This is useful to avoid having to re-enter the token each time the Jupiter notebook is restarted.","title":"connect"},{"location":"#about-impresso","text":"","title":"About Impresso"},{"location":"#impresso-project","text":"Impresso - Media Monitoring of the Past is an interdisciplinary research project that aims to develop and consolidate tools for processing and exploring large collections of media archives across modalities, time, languages and national borders. The first project (2017-2021) was funded by the Swiss National Science Foundation under grant No. CRSII5_173719 and the second project (2023-2027) by the SNSF under grant No. CRSII5_213585 and the Luxembourg National Research Fund under grant No. 17498891.","title":"Impresso project"},{"location":"#copyright","text":"Copyright (C) 2024 The Impresso team.","title":"Copyright"},{"location":"#license","text":"This program is provided as open source under the GNU Affero General Public License v3 or later.","title":"License"},{"location":"preparing_queries/","text":"Preparing queries Some filter parameters accept a combination of modifiers to create complex queries. For example, to search for content that mentions both Titanic and ship , you can use the AND modifier to combine these conditions: from impresso import AND impresso.search.find(term=AND(\"Titanic\", \"ship\")) We can refine this condition and search for all content items that mention Titanic and ship together OR mention Titanic and iceberg together AND do not mention Di Caprio . from impresso import AND, OR impresso.search.find( term=( AND(\"Titanic\", \"ship\") | AND(\"Titanic\", \"iceberg\") ) & ~OR(\"Di Caprio\") ) Modifiers impresso.structures.OR Bases: TermSet [ T ] , Generic [ T ] Used in filters to specify that any of the terms must be present in the result. Example: OR([\"apple\", \"banana\"]) OR(\"apple\") OR(\"apple\", \"banana\") # Negate: ~OR(\"apple\", \"banana\") impresso.structures.AND Bases: TermSet [ T ] , Generic [ T ] Used in filters to specify that all the terms must be present in the result. Example: AND([\"apple\", \"banana\"]) AND(\"apple\") AND(\"apple\", \"banana\") # Negate: ~AND(\"apple\", \"banana\") impresso.structures.DateRange Date range. Example: DateRange(datetime.date(1900, 1, 1), datetime.date(2000, 12, 31)) # Everything until 2000 DateRange(None, datetime.date(2000, 12, 31)) # Everything since 1900 DateRange(datetime.date(1900, 12, 31), None) impresso.structures.NumericRange Date range. Example: NumericRange(1, 10)","title":"Preparing Queries"},{"location":"preparing_queries/#preparing-queries","text":"Some filter parameters accept a combination of modifiers to create complex queries. For example, to search for content that mentions both Titanic and ship , you can use the AND modifier to combine these conditions: from impresso import AND impresso.search.find(term=AND(\"Titanic\", \"ship\")) We can refine this condition and search for all content items that mention Titanic and ship together OR mention Titanic and iceberg together AND do not mention Di Caprio . from impresso import AND, OR impresso.search.find( term=( AND(\"Titanic\", \"ship\") | AND(\"Titanic\", \"iceberg\") ) & ~OR(\"Di Caprio\") )","title":"Preparing queries"},{"location":"preparing_queries/#modifiers","text":"","title":"Modifiers"},{"location":"preparing_queries/#impresso.structures.OR","text":"Bases: TermSet [ T ] , Generic [ T ] Used in filters to specify that any of the terms must be present in the result. Example: OR([\"apple\", \"banana\"]) OR(\"apple\") OR(\"apple\", \"banana\") # Negate: ~OR(\"apple\", \"banana\")","title":"OR"},{"location":"preparing_queries/#impresso.structures.AND","text":"Bases: TermSet [ T ] , Generic [ T ] Used in filters to specify that all the terms must be present in the result. Example: AND([\"apple\", \"banana\"]) AND(\"apple\") AND(\"apple\", \"banana\") # Negate: ~AND(\"apple\", \"banana\")","title":"AND"},{"location":"preparing_queries/#impresso.structures.DateRange","text":"Date range. Example: DateRange(datetime.date(1900, 1, 1), datetime.date(2000, 12, 31)) # Everything until 2000 DateRange(None, datetime.date(2000, 12, 31)) # Everything since 1900 DateRange(datetime.date(1900, 12, 31), None)","title":"DateRange"},{"location":"preparing_queries/#impresso.structures.NumericRange","text":"Date range. Example: NumericRange(1, 10)","title":"NumericRange"},{"location":"resources/","text":"Impresso API resources Search Search content items in the Impresso corpus. impresso.search.find(term='Titanic', limit=10) impresso.resources.search.SearchResource Bases: Resource Search content items in the impresso database. find ( term = None , order_by = None , limit = None , offset = None , with_text_contents = False , title = None , front_page = None , entity_id = None , newspaper_id = None , date_range = None , language = None , mention = None , topic_id = None , collection_id = None , country = None , partner_id = None , text_reuse_cluster_id = None ) Search for content items in Impresso. Parameters: term ( str | AND [ str ] | OR [ str ] | None , default: None ) \u2013 Search term. order_by ( SearchOrderByLiteral | None , default: None ) \u2013 Order by aspect. limit ( int | None , default: None ) \u2013 Number of results to return. offset ( int | None , default: None ) \u2013 Number of results to skip. with_text_contents ( bool | None , default: False ) \u2013 Return only content items with text contents. title ( str | AND [ str ] | OR [ str ] | None , default: None ) \u2013 Return only content items that have this term or all/any of the terms in the title. front_page ( bool | None , default: None ) \u2013 Return only content items that were on the front page. entity_id ( str | AND [ str ] | OR [ str ] | None , default: None ) \u2013 Return only content items that mention this entity or all/any of the entities. date_range ( DateRange | None , default: None ) \u2013 Return only content items that were published in this date range. language ( str | OR [ str ] | None , default: None ) \u2013 Return only content items that are in this language or all/any of the languages. mention ( str | AND [ str ] | OR [ str ] | None , default: None ) \u2013 Return only content items that mention an entity with this term or all/any of entities with the terms. topic_id ( str | AND [ str ] | OR [ str ] | None , default: None ) \u2013 Return only content items that are about this topic or all/any of the topics. collection_id ( str | OR [ str ] | None , default: None ) \u2013 Return only content items that are in this collection or all/any of the collections. country ( str | OR [ str ] | None , default: None ) \u2013 Return only content items that are from this country or all/any of the countries. partner_id ( str | OR [ str ] | None , default: None ) \u2013 Return only content items that are from this partner or all/any of the partners. text_reuse_cluster_id ( str | OR [ str ] | None , default: None ) \u2013 Return only content items that are in this text reuse cluster or all/any of the clusters. Returns: SearchDataContainer ( SearchDataContainer ) \u2013 Data container with a page of results of the search. impresso . api_client . models . search_order_by . SearchOrderByLiteral = Literal [ 'date' , 'id' , 'relevance' , '-date' , '-relevance' , '-id' ] module-attribute impresso.resources.search.SearchDataContainer Bases: DataContainer Response of a search call. df : DataFrame property Return the data as a pandas dataframe. Entities Search entities in the Impresso corpus. impresso.entities.find(term=\"Douglas Adams\") impresso.resources.entities.EntitiesResource Bases: Resource Search entities in the Impresso database. find ( term = None , wikidata_id = None , entity_id = None , entity_type = None , order_by = None , resolve = False , limit = None , offset = None ) Search entities in Impresso. Parameters: term ( str | None , default: None ) \u2013 Search term. wikidata_id ( str | AND [ str ] | OR [ str ] | None , default: None ) \u2013 Return only entities resolved to this Wikidata ID. entity_id ( str | AND [ str ] | OR [ str ] | None , default: None ) \u2013 Return only entity with this ID. entity_type ( EntityType | AND [ EntityType ] | OR [ EntityType ] | None , default: None ) \u2013 Return only entities of this type. order_by ( FindEntitiesOrderByLiteral | None , default: None ) \u2013 Field to order results by. resolve ( bool , default: False ) \u2013 Return Wikidata details of the entities, if the entity is linked to a Wikidata entry. limit ( int | None , default: None ) \u2013 Number of results to return. offset ( int | None , default: None ) \u2013 Number of results to skip. Returns: FindEntitiesContainer ( FindEntitiesContainer ) \u2013 Data container with a page of results of the search. get ( id ) Get entity by ID. impresso . resources . entities . EntityType = Literal [ 'person' , 'location' ] module-attribute impresso . api_client . models . find_entities_order_by . FindEntitiesOrderByLiteral = Literal [ 'count' , 'count-mentions' , 'name' , 'relevance' , '-relevance' , '-name' , '-count' , '-count-mentions' ] module-attribute Media sources Search media sources available in the Impresso corpus. impresso.media_sources.find( term=\"wort\", order_by=\"lastIssue\", ) impresso.resources.media_sources.MediaSourcesResource Bases: Resource Search media sources in the Impresso database. find ( term = None , type = None , order_by = None , with_properties = False , limit = None , offset = None ) Search media sources in Impresso. Parameters: term ( str | None , default: None ) \u2013 Search term. type ( FindMediaSourcesTypeLiteral | None , default: None ) \u2013 Type of media sources to search for. order_by ( FindMediaSourcesOrderByLiteral | None , default: None ) \u2013 Field to order results by. with_properties ( bool , default: False ) \u2013 Include properties in the results. limit ( int | None , default: None ) \u2013 Number of results to return. offset ( int | None , default: None ) \u2013 Number of results to skip. Returns: FindMediaSourcesContainer ( FindMediaSourcesContainer ) \u2013 Data container with a page of results of the search. impresso . api_client . models . find_media_sources_order_by . FindMediaSourcesOrderByLiteral = Literal [ 'countIssues' , 'firstIssue' , 'lastIssue' , 'name' , '-name' , '-firstIssue' , '-lastIssue' , '-countIssues' ] module-attribute impresso.resources.media_sources.FindMediaSourcesContainer Bases: DataContainer Response of a search call. df : DataFrame property Return the data as a pandas dataframe. Content Items Get a single content item by ID. impresso.content_items.get(\"NZZ-1794-08-09-a-i0002\") Collections Work with collections impresso.resources.collections.CollectionsResource Bases: Resource Work with collections. add_items ( collection_id , item_ids ) Add items to a collection by their IDs. NOTE : Items are not added immediately. This operation may take up to a few minutes to complete and reflect in the collection. Parameters: collection_id ( str ) \u2013 ID of the collection. item_ids ( list [ str ] ) \u2013 IDs of the content items to add. find ( term = None , order_by = None , limit = None , offset = None ) Search collections in Impresso. Parameters: term ( str | None , default: None ) \u2013 Search term. order_by ( FindCollectionsOrderByLiteral | None , default: None ) \u2013 Order by aspect. limit ( int | None , default: None ) \u2013 Number of results to return. offset ( int | None , default: None ) \u2013 Number of results to skip. Returns: FindCollectionsContainer ( FindCollectionsContainer ) \u2013 Data container with a page of results of the search. get ( id ) Get collection by ID. items ( collection_id , limit = None , offset = None ) Return all content items from a collection. Parameters: collection_id ( str ) \u2013 ID of the collection. limit ( int | None , default: None ) \u2013 Number of results to return. offset ( int | None , default: None ) \u2013 Number of results to skip. Returns: SearchDataContainer ( SearchDataContainer ) \u2013 Data container with a page of results of the search. remove_items ( collection_id , item_ids ) Add items to a collection by their IDs. NOTE : Items are not removed immediately. This operation may take up to a few minutes to complete and reflect in the collection. Parameters: collection_id ( str ) \u2013 ID of the collection. item_ids ( list [ str ] ) \u2013 IDs of the content items to add. impresso . api_client . models . find_collections_order_by . FindCollectionsOrderByLiteral = Literal [ 'date' , 'size' , '-date' , '-size' ] module-attribute impresso.resources.collections.FindCollectionsContainer Bases: DataContainer Response of a find call. df : DataFrame property Return the data as a pandas dataframe. Named entity recognition The python library contains a set of named entity recognition methods that use the same NER model used to add entities to the Impresso database. impresso.resources.tools.ToolsResource Bases: Resource Various helper tools nel ( text ) Named Entity Linking This method requires named entities to be enclosed in tags: [START]entity[END]. Parameters: text ( str ) \u2013 Text to process Returns: NerContainer ( NerContainer ) \u2013 List of named entities ner ( text ) Named Entity Recognition This method is faster than ner_nel but does not provide any linking to external resources. Parameters: text ( str ) \u2013 Text to process Returns: NerContainer ( NerContainer ) \u2013 List of named entities ner_nel ( text ) Named Entity Recognition and Named Entity Linking This method is slower than ner but provides linking to external resources. Parameters: text ( str ) \u2013 Text to process Returns: NerContainer ( NerContainer ) \u2013 List of named entities impresso.resources.tools.NerContainer Bases: DataContainer Name entity recognition result container. df : DataFrame property Return the data as a pandas dataframe. limit : int property Page size. offset : int property Page offset. size : int property Current page size. total : int property Total number of results. Text reuse Two resources can be used to search text reuse clusters and passages. impresso.resources.text_reuse.clusters.TextReuseClustersResource Bases: Resource Text reuse clusters resource. impresso.resources.text_reuse.passages.TextReusePassagesResource Bases: Resource Text reuse passages resource.","title":"Resources"},{"location":"resources/#impresso-api-resources","text":"","title":"Impresso API resources"},{"location":"resources/#search","text":"Search content items in the Impresso corpus. impresso.search.find(term='Titanic', limit=10)","title":"Search"},{"location":"resources/#impresso.resources.search.SearchResource","text":"Bases: Resource Search content items in the impresso database.","title":"SearchResource"},{"location":"resources/#impresso.resources.search.SearchResource.find","text":"Search for content items in Impresso. Parameters: term ( str | AND [ str ] | OR [ str ] | None , default: None ) \u2013 Search term. order_by ( SearchOrderByLiteral | None , default: None ) \u2013 Order by aspect. limit ( int | None , default: None ) \u2013 Number of results to return. offset ( int | None , default: None ) \u2013 Number of results to skip. with_text_contents ( bool | None , default: False ) \u2013 Return only content items with text contents. title ( str | AND [ str ] | OR [ str ] | None , default: None ) \u2013 Return only content items that have this term or all/any of the terms in the title. front_page ( bool | None , default: None ) \u2013 Return only content items that were on the front page. entity_id ( str | AND [ str ] | OR [ str ] | None , default: None ) \u2013 Return only content items that mention this entity or all/any of the entities. date_range ( DateRange | None , default: None ) \u2013 Return only content items that were published in this date range. language ( str | OR [ str ] | None , default: None ) \u2013 Return only content items that are in this language or all/any of the languages. mention ( str | AND [ str ] | OR [ str ] | None , default: None ) \u2013 Return only content items that mention an entity with this term or all/any of entities with the terms. topic_id ( str | AND [ str ] | OR [ str ] | None , default: None ) \u2013 Return only content items that are about this topic or all/any of the topics. collection_id ( str | OR [ str ] | None , default: None ) \u2013 Return only content items that are in this collection or all/any of the collections. country ( str | OR [ str ] | None , default: None ) \u2013 Return only content items that are from this country or all/any of the countries. partner_id ( str | OR [ str ] | None , default: None ) \u2013 Return only content items that are from this partner or all/any of the partners. text_reuse_cluster_id ( str | OR [ str ] | None , default: None ) \u2013 Return only content items that are in this text reuse cluster or all/any of the clusters. Returns: SearchDataContainer ( SearchDataContainer ) \u2013 Data container with a page of results of the search.","title":"find"},{"location":"resources/#impresso.api_client.models.search_order_by.SearchOrderByLiteral","text":"","title":"SearchOrderByLiteral"},{"location":"resources/#impresso.resources.search.SearchDataContainer","text":"Bases: DataContainer Response of a search call.","title":"SearchDataContainer"},{"location":"resources/#impresso.resources.search.SearchDataContainer.df","text":"Return the data as a pandas dataframe.","title":"df"},{"location":"resources/#entities","text":"Search entities in the Impresso corpus. impresso.entities.find(term=\"Douglas Adams\")","title":"Entities"},{"location":"resources/#impresso.resources.entities.EntitiesResource","text":"Bases: Resource Search entities in the Impresso database.","title":"EntitiesResource"},{"location":"resources/#impresso.resources.entities.EntitiesResource.find","text":"Search entities in Impresso. Parameters: term ( str | None , default: None ) \u2013 Search term. wikidata_id ( str | AND [ str ] | OR [ str ] | None , default: None ) \u2013 Return only entities resolved to this Wikidata ID. entity_id ( str | AND [ str ] | OR [ str ] | None , default: None ) \u2013 Return only entity with this ID. entity_type ( EntityType | AND [ EntityType ] | OR [ EntityType ] | None , default: None ) \u2013 Return only entities of this type. order_by ( FindEntitiesOrderByLiteral | None , default: None ) \u2013 Field to order results by. resolve ( bool , default: False ) \u2013 Return Wikidata details of the entities, if the entity is linked to a Wikidata entry. limit ( int | None , default: None ) \u2013 Number of results to return. offset ( int | None , default: None ) \u2013 Number of results to skip. Returns: FindEntitiesContainer ( FindEntitiesContainer ) \u2013 Data container with a page of results of the search.","title":"find"},{"location":"resources/#impresso.resources.entities.EntitiesResource.get","text":"Get entity by ID.","title":"get"},{"location":"resources/#impresso.resources.entities.EntityType","text":"","title":"EntityType"},{"location":"resources/#impresso.api_client.models.find_entities_order_by.FindEntitiesOrderByLiteral","text":"","title":"FindEntitiesOrderByLiteral"},{"location":"resources/#media-sources","text":"Search media sources available in the Impresso corpus. impresso.media_sources.find( term=\"wort\", order_by=\"lastIssue\", )","title":"Media sources"},{"location":"resources/#impresso.resources.media_sources.MediaSourcesResource","text":"Bases: Resource Search media sources in the Impresso database.","title":"MediaSourcesResource"},{"location":"resources/#impresso.resources.media_sources.MediaSourcesResource.find","text":"Search media sources in Impresso. Parameters: term ( str | None , default: None ) \u2013 Search term. type ( FindMediaSourcesTypeLiteral | None , default: None ) \u2013 Type of media sources to search for. order_by ( FindMediaSourcesOrderByLiteral | None , default: None ) \u2013 Field to order results by. with_properties ( bool , default: False ) \u2013 Include properties in the results. limit ( int | None , default: None ) \u2013 Number of results to return. offset ( int | None , default: None ) \u2013 Number of results to skip. Returns: FindMediaSourcesContainer ( FindMediaSourcesContainer ) \u2013 Data container with a page of results of the search.","title":"find"},{"location":"resources/#impresso.api_client.models.find_media_sources_order_by.FindMediaSourcesOrderByLiteral","text":"","title":"FindMediaSourcesOrderByLiteral"},{"location":"resources/#impresso.resources.media_sources.FindMediaSourcesContainer","text":"Bases: DataContainer Response of a search call.","title":"FindMediaSourcesContainer"},{"location":"resources/#impresso.resources.media_sources.FindMediaSourcesContainer.df","text":"Return the data as a pandas dataframe.","title":"df"},{"location":"resources/#content-items","text":"Get a single content item by ID. impresso.content_items.get(\"NZZ-1794-08-09-a-i0002\")","title":"Content Items"},{"location":"resources/#collections","text":"Work with collections","title":"Collections"},{"location":"resources/#impresso.resources.collections.CollectionsResource","text":"Bases: Resource Work with collections.","title":"CollectionsResource"},{"location":"resources/#impresso.resources.collections.CollectionsResource.add_items","text":"Add items to a collection by their IDs. NOTE : Items are not added immediately. This operation may take up to a few minutes to complete and reflect in the collection. Parameters: collection_id ( str ) \u2013 ID of the collection. item_ids ( list [ str ] ) \u2013 IDs of the content items to add.","title":"add_items"},{"location":"resources/#impresso.resources.collections.CollectionsResource.find","text":"Search collections in Impresso. Parameters: term ( str | None , default: None ) \u2013 Search term. order_by ( FindCollectionsOrderByLiteral | None , default: None ) \u2013 Order by aspect. limit ( int | None , default: None ) \u2013 Number of results to return. offset ( int | None , default: None ) \u2013 Number of results to skip. Returns: FindCollectionsContainer ( FindCollectionsContainer ) \u2013 Data container with a page of results of the search.","title":"find"},{"location":"resources/#impresso.resources.collections.CollectionsResource.get","text":"Get collection by ID.","title":"get"},{"location":"resources/#impresso.resources.collections.CollectionsResource.items","text":"Return all content items from a collection. Parameters: collection_id ( str ) \u2013 ID of the collection. limit ( int | None , default: None ) \u2013 Number of results to return. offset ( int | None , default: None ) \u2013 Number of results to skip. Returns: SearchDataContainer ( SearchDataContainer ) \u2013 Data container with a page of results of the search.","title":"items"},{"location":"resources/#impresso.resources.collections.CollectionsResource.remove_items","text":"Add items to a collection by their IDs. NOTE : Items are not removed immediately. This operation may take up to a few minutes to complete and reflect in the collection. Parameters: collection_id ( str ) \u2013 ID of the collection. item_ids ( list [ str ] ) \u2013 IDs of the content items to add.","title":"remove_items"},{"location":"resources/#impresso.api_client.models.find_collections_order_by.FindCollectionsOrderByLiteral","text":"","title":"FindCollectionsOrderByLiteral"},{"location":"resources/#impresso.resources.collections.FindCollectionsContainer","text":"Bases: DataContainer Response of a find call.","title":"FindCollectionsContainer"},{"location":"resources/#impresso.resources.collections.FindCollectionsContainer.df","text":"Return the data as a pandas dataframe.","title":"df"},{"location":"resources/#named-entity-recognition","text":"The python library contains a set of named entity recognition methods that use the same NER model used to add entities to the Impresso database.","title":"Named entity recognition"},{"location":"resources/#impresso.resources.tools.ToolsResource","text":"Bases: Resource Various helper tools","title":"ToolsResource"},{"location":"resources/#impresso.resources.tools.ToolsResource.nel","text":"Named Entity Linking This method requires named entities to be enclosed in tags: [START]entity[END]. Parameters: text ( str ) \u2013 Text to process Returns: NerContainer ( NerContainer ) \u2013 List of named entities","title":"nel"},{"location":"resources/#impresso.resources.tools.ToolsResource.ner","text":"Named Entity Recognition This method is faster than ner_nel but does not provide any linking to external resources. Parameters: text ( str ) \u2013 Text to process Returns: NerContainer ( NerContainer ) \u2013 List of named entities","title":"ner"},{"location":"resources/#impresso.resources.tools.ToolsResource.ner_nel","text":"Named Entity Recognition and Named Entity Linking This method is slower than ner but provides linking to external resources. Parameters: text ( str ) \u2013 Text to process Returns: NerContainer ( NerContainer ) \u2013 List of named entities","title":"ner_nel"},{"location":"resources/#impresso.resources.tools.NerContainer","text":"Bases: DataContainer Name entity recognition result container.","title":"NerContainer"},{"location":"resources/#impresso.resources.tools.NerContainer.df","text":"Return the data as a pandas dataframe.","title":"df"},{"location":"resources/#impresso.resources.tools.NerContainer.limit","text":"Page size.","title":"limit"},{"location":"resources/#impresso.resources.tools.NerContainer.offset","text":"Page offset.","title":"offset"},{"location":"resources/#impresso.resources.tools.NerContainer.size","text":"Current page size.","title":"size"},{"location":"resources/#impresso.resources.tools.NerContainer.total","text":"Total number of results.","title":"total"},{"location":"resources/#text-reuse","text":"Two resources can be used to search text reuse clusters and passages.","title":"Text reuse"},{"location":"resources/#impresso.resources.text_reuse.clusters.TextReuseClustersResource","text":"Bases: Resource Text reuse clusters resource.","title":"TextReuseClustersResource"},{"location":"resources/#impresso.resources.text_reuse.passages.TextReusePassagesResource","text":"Bases: Resource Text reuse passages resource.","title":"TextReusePassagesResource"},{"location":"result/","text":"Result object When you execute a query, a DataContainer object is returned. This object encapsulates the query results along with metadata about the query. Additionally, it provides a suite of utility methods for accessing the results in various ways. In a Python notebook environment, the DataContainer object can render a preview of its data, facilitating quick inspection of the query results. impresso.data_container.DataContainer Bases: Generic [ IT , T ] Generic container for responses from the Impresso API returned by resource methods ( get , find ). Generally represents a single page of the result. df : DataFrame property Returns the response data as a pandas dataframe. limit : int property Current page size. offset : int property Current page offset. pydantic : T property Returns the response data as a pydantic model. raw : dict [ str , Any ] property Returns the response data as a python dictionary. size : int property Current page size. total : int property Total number of results. url : str | None property URL of an Impresso web application page representing the result set from this container.","title":"Result Object"},{"location":"result/#result-object","text":"When you execute a query, a DataContainer object is returned. This object encapsulates the query results along with metadata about the query. Additionally, it provides a suite of utility methods for accessing the results in various ways. In a Python notebook environment, the DataContainer object can render a preview of its data, facilitating quick inspection of the query results.","title":"Result object"},{"location":"result/#impresso.data_container.DataContainer","text":"Bases: Generic [ IT , T ] Generic container for responses from the Impresso API returned by resource methods ( get , find ). Generally represents a single page of the result.","title":"DataContainer"},{"location":"result/#impresso.data_container.DataContainer.df","text":"Returns the response data as a pandas dataframe.","title":"df"},{"location":"result/#impresso.data_container.DataContainer.limit","text":"Current page size.","title":"limit"},{"location":"result/#impresso.data_container.DataContainer.offset","text":"Current page offset.","title":"offset"},{"location":"result/#impresso.data_container.DataContainer.pydantic","text":"Returns the response data as a pydantic model.","title":"pydantic"},{"location":"result/#impresso.data_container.DataContainer.raw","text":"Returns the response data as a python dictionary.","title":"raw"},{"location":"result/#impresso.data_container.DataContainer.size","text":"Current page size.","title":"size"},{"location":"result/#impresso.data_container.DataContainer.total","text":"Total number of results.","title":"total"},{"location":"result/#impresso.data_container.DataContainer.url","text":"URL of an Impresso web application page representing the result set from this container.","title":"url"}]}